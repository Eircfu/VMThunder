#!/usr/bin/env python

import sys
import os
from libfcg.fcg import FCG
sys.path.append("..")

from vmthunder.computenode import ComputeNode
from vmthunder.getconf import GetConf
from vmthunder import service
import threading
from multiprocessing import Process, current_process

def wsgi_service():
    server = service.APIService()
    server.start()

def make_daemon(func, *args, **kwargs):
    try:
        pid = os.fork()    
        if pid > 0:
            # exit first parent   
            sys.exit(0)
    except OSError, e:
        print >>sys.stderr, "fork #1 failed: %d (%s)" % (e.errno, e.strerror)    
        sys.exit(1)
    # decouple from parent envirtonment
    #os.chdir(workpath)
    os.setsid()
    os.umask(0)
    # do second fork
    try:
        pid = os.fork()
        if pid > 0 :
            # exit from second parent, print eventual PID before
            print "Daemon PID %d" % pid
            sys.exit(0)
    except OSError, e:
        print >>sys.stderr, "fork #2 failed: %d (%s)" % (e.errno, e.strerror)
        sys.exit(1)
    #start the daemon main loop
    func(*args, **kwargs)

def serve():
    launcher = service.process_launcher()
    server = service.APIService()
    launcher.launch_service(server, workers = 1)
    launcher.wait()

def main():
    gc = GetConf('../etc/vmthunder/vmthunder.conf')
    name = gc.get_fcg_name()
    ssds = gc.get_fcg_ssds()
    blocksize = gc.get_fcg_blocksize()
    pattern = gc.get_fcg_pattern()
    #print name, ssds, blocksize, pattern
    
    fcg = FCG(name)
    fcg.create_group(ssds, blocksize, pattern)

if __name__ == '__main__':
    #main()
    #serve()`
    make_daemon(wsgi_service)
