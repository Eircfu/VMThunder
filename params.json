{"name":"VMThunder","tagline":"Booting a large number of virtual machines in a minute!","body":"VMThunder\r\n=========\r\nCreating a large number of virtual machine instances in an IaaS\r\ncloud can be quite time-consuming, because the virtual disk\r\nimages need to be transferred to the compute nodes in prior to\r\nbooting. \r\n\r\nVMThunder addresses this problem by 3 improvements: compute node \r\ncaching, P2P transfering and prefetching, in addition to on-demand \r\ntransfering (network storage). VMThunder is a scalable and cost-effective\r\naccelerator for bulk povisioning of virtual machines. And it can\r\nbe, if preferred, gracefully turned off after the booting process is\r\ncomplete.\r\n\r\nBenchmarks show that VMThunder can boot 160 VMs (CentOS 6.2 with\r\ngnome desktop) on 160 compute nodes with in a minute, and\r\nthe average time consumption is 20 seconds. With prefetching, the\r\ncomplete and average time consumption can be respecttively reduced\r\nto 18 and 16 seconds. The network is Gigabit Ethernet for all\r\nservers in the benchmark environment.\r\n\r\nBackground\r\n============\r\nThe Infrastructure as a Service (IaaS) cloud has become\r\nincreasingly important due to its flexible pay-as-you-go business \r\nmodel. Over the IaaS cloud, customers\r\ncan rent computing and storage resources\r\naccording to their actual service requirement, and thus\r\nthey can save a great deal of cost without the need to\r\ninvest on computing infrastructure. The convenience\r\nfor customers, however, poses a challenging problem\r\nto IaaS cloud providers: how to accommodate dynamic\r\ncomputing requirements of customers, who may\r\nrequest a large quantity of virtual machines (VMs) in\r\na short time period?\r\n\r\nIt has been seen that in large-scale IaaS cloud\r\nlike the National Supercomputing Center of China\r\nin Tianjin (NSCC-Tianjin), some users require\r\nresources (virtual CPU, memory, disk space) for\r\ncompute-intensive applications, including, for example,\r\nanimation, DNA sequence analysis, and weather\r\nforecast. In many cases, they may submit requests\r\nfor hundreds of VMs and they need the cloud to\r\nrespond to their requests quickly. Once their services\r\nfinish, they normally release VMs to save cost. The\r\nsimilar phenomenon has been observed in other commercial\r\nIaaS cloud such as Amazon EC2.\r\nFor an IaaS cloud service provider, a large delay in\r\nVM provisioning (e.g., hours) may turn its customers\r\naway to its competitors, and it is thus critical to\r\nsupport fast provisioning of a large amount of VMs\r\nto maintain its market competence.\r\n\r\nSubstantial efforts have been devoted to fast provisioning\r\nof a large number of VMs. Nevertheless,\r\nexisting solutions still have large room for further\r\nimprovement. For example, the time for provisioning\r\nVMs over Amazon EC2 is still non trivial, taking from\r\n3 minutes up to 30 minutes to get a 1 GB compressed\r\nVM image ready to work. Wartel et al. use\r\nthe peer-to-peer (P2P) technology to disseminate VM\r\nimages, and it takes about 30 minutes to configure 400\r\nservers. Some work focuses on the problem\r\nof optimal image placement. Based on the analysis\r\nof empirical usage of VM images, they split\r\nthe images into small strips over the distributed file\r\nsystem for efficient access and storage. This method,\r\nhowever, needs a long time to pre-process the image\r\nfiles. Another type of solutions uses the so-termed\r\n\"memory fork\" method (e.g., SnowFlock and Twinkle), \r\nwhich remotely clones VMs by duplicating\r\nthe running states of the VM. Memory fork, however,\r\nmay cause new problems such as data persistence.\r\n\r\nThough the transferring process can be eliminated by using network\r\nstorage like NFS, cluster FS, distributed FS or SAN, this approach\r\nlacks scalability due to the limited number of replica for each piece\r\nof data. Booting a large number of virtual machines will direct a\r\nlarge number of servers to access the same set of data at the same\r\ntime, which will generate great pressure on the storage servers.\r\nWhat's more, network storage tends to provide less I/O performance\r\nat a reasonable price.\r\n\r\nVMThunder pushes the state of the art of largescale VM provisioning, \r\nby integrating on-demand transferring, compute node (client-side) \r\ncaching, P2P transfering and prefetching. The protocol for data \r\ntransferring is iSCSI, but technically compatible with other \r\nprotocols like nbd, FCoE or AoE. Caching is realized with Facebook's \r\nflashcache module, but technically compatible with other block-level \r\ncaching modules like bcache, dm-cache, etc.\r\n  \r\n    \r\n\r\n\r\n\r\n","google":"UA-47879441-1","note":"Don't delete this file! It's used internally to help with page regeneration."}